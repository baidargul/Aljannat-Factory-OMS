generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model orders {
  id             String           @id @unique
  dateOfBooking  DateTime         @default(now()) @db.Timestamptz(6)
  dateOfDelivery DateTime         @default(now()) @db.Timestamptz(6)
  status         Status?
  userId         String?
  courier        String?
  trackingNo     String?
  customerId     String?
  index          Int              @default(autoincrement())
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @default(now()) @db.Timestamptz(6)
  noteId         String?
  orderNotes     orderNotes[]
  customers      customers?       @relation(fields: [customerId], references: [id])
  profile        profile?         @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "userId")
  ordersRegister ordersRegister[]
}

model customers {
  id              String           @id @unique @default(uuid())
  name            String?
  phone           String
  phone2          String?
  address         String?
  city            String?
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @db.Timestamptz(6)
  index           Int              @default(autoincrement())
  cityId          String?
  logisticsCities logisticsCities? @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cityId")
  orders          orders[]
}

model sheets {
  id        String   @id @unique @default(uuid())
  name      String
  url       String
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  index     Int      @default(autoincrement())
}

model product {
  id                String              @id @default(uuid())
  name              String              @unique
  index             Int                 @default(autoincrement())
  imageUrl          String?
  ordersRegister    ordersRegister[]
  productVariations productVariations[]
}

model errorlogs {
  id          String   @id @default(uuid())
  description String?
  date        DateTime @default(now()) @db.Timestamptz(6)
  index       Int      @default(autoincrement())
}

model ordersRegister {
  id                String             @id @default(uuid())
  orderId           String?
  productId         String?
  variantId         String?
  index             Int                @default(autoincrement())
  amount            Int?               @default(0)
  weight            Float
  orders            orders?            @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "orderId")
  product           product?           @relation(fields: [productId], references: [id], onDelete: Cascade, map: "productId")
  productVariations productVariations? @relation(fields: [variantId], references: [id], onDelete: Cascade, map: "variantId")
}

model productVariations {
  id             String           @id @default(uuid())
  productId      String
  name           String
  index          Int              @default(autoincrement())
  defaultUnit    String?          @default("kg")
  imageUrl       String?
  defaultWeight  Float?           @default(1) @db.Real
  defaultAmount  Int?             @default(750)
  ordersRegister ordersRegister[]
  product        product          @relation(fields: [productId], references: [id], onDelete: Cascade, map: "productId")
}

model profile {
  id         String       @id @default(uuid())
  userId     String?      @unique
  name       String
  imageURL   String?
  email      String
  createdAt  DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?    @default(now()) @db.Timestamptz(6)
  role       Role         @default(UNVERIFIED)
  orderNotes orderNotes[]
  orders     orders[]
  settings   settings[]
}

model orderNotes {
  id        String    @id @default(uuid())
  orderId   String
  userId    String
  note      String
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  orders    orders    @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orderId")
  profile   profile   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "userId")
}

model settings {
  id        String    @id @default(uuid())
  name      String    @unique
  value1    String?
  value2    String?
  value3    String?
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  userId    String?
  profile   profile?  @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
}

model courier_dep {
  id        String    @id @default(uuid())
  name      String    @unique
  username  String?
  password  String?
  apikey    String?
  createdAt DateTime? @db.Timestamptz(6)
  useApiKey Boolean?  @default(true)
  accountNo String?
}

model logisticsCities {
  id        String      @id @default(uuid())
  City      String?     @unique
  customers customers[]
}

enum Role {
  SUPERADMIN
  ADMIN
  MANAGER
  ORDERBOOKER
  ORDERVERIFIER
  PAYMENTVERIFIER
  DISPATCHER
  UNVERIFIED
  INVENTORYMANAGER
}

enum Status {
  BOOKED
  VERIFIEDORDER
  PAYMENTVERIFIED
  READYTODISPATCH
  CANCELLED
  DISPATCHED
}
